<?php
// $Id: jobplus.module,v 1.2 2009/10/09 21:15:12 newzeal Exp $ 
/*
*   This module created as a sub module for job module to provide search as follows:
*   Country and province search using cck_address and country_select
*   Category search using adv_taxonomy_menu 
*/
// disable any jobs which have expired and notify creator.  TODO suitable expiry function
function jobplus_cronxx() {
  $duration = variable_get('jobplus_duration', 7884000);
  $result = db_query("SELECT nid, uid, title, created FROM {node} WHERE type='job' AND status=1");
  while($row = db_fetch_object($result)) {
    if($row->created<time()-$duration) {
	  db_query("UPDATE {node} SET status=0 WHERE nid=%d", $row->nid);
	  if($mail = db_result(db_query("SELECT mail FROM {users} WHERE uid=%d", $row->uid))) {
	    $subject = 'Notification of Expiry of Job from Dermpedia';
	    $body = 
		'Greetings from Dermpedia
		
		Your Job at '.l($row->title, 'node/'.$row->nid).' has been advertised for '.round(variable_get('jobplus_duration', 7884000)/86400).' days and has expired.  Thank-you for advertising at Dermpedia';
	    drupal_mail('', $mail, $subject, $body, $from = NULL);
	  }
	}
  }
}

/**
 * Implementation of hook_menu()
 *
 */
function jobplus_menu($may_cache) {
  global $user;
  global $_job_settings;

  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path'               => 'admin/settings/job/content_types',
      'title'              => t('Job Content Type'),
      'access'             => user_access('administer site configuration'),
      'type' 			   => MENU_LOCAL_TASK,
	  '#weight' => 0,
    );
   $items[] = array(
      'path'               => 'admin/settings/job/jobplus_settings',
      'title'              => t('Job Plus Settings'),
      'callback'           => 'drupal_get_form',
      'callback arguments' => array('jobplus_settings_form'),
      'access'             => user_access('administer site configuration'),
      'type' 			   => MENU_LOCAL_TASK,
 	  '#weight' 		   => 1,
   );
   $items[] = array(
      'path'               => 'admin/settings/job/countries',
      'title'              => t('Missing Location Data'),
      'callback'           => 'drupal_get_form',
      'callback arguments' => array('jobplus_country_settings_form'),
      'access'             => user_access('administer site configuration'),
      'type' 			   => MENU_LOCAL_TASK,
 	  '#weight' 		   => 1,
   );
  }
	if(module_exists('adv_taxonomy_menu')) {
      if(!isset($_job_settings) && $result = adv_taxonomy_menu_get_settings(variable_get('jobplus_adv_tax_menu_tmid', array()))) {
	    $_job_settings = db_fetch_object($result);
		$_job_settings->vocab_order = unserialize($_job_settings->vocab_order);
	  }
      $bc = adv_taxonomy_menu_breadcrumb();
	  $bc = array_merge(jobplus_breadcrumb(), $bc);
	  if($bc) drupal_set_breadcrumb($bc);
      if($bc) drupal_set_title(strip_tags(implode(" ",$bc)));
	}


  return $items;
}
function jobplus_access() {
   return TRUE;
}
function jobplus_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  global $user;
    switch ($op) {
	  case 'load':
	    global $_node;
		$_node = $node;
	  break;
	  case 'view':
	    if($node->type=="job") {
		  if(module_exists('adv_taxonomy_menu')) {
		    $result = adv_taxonomy_menu_node_breadcrumb($node->taxonomy);
		    //drupal_set_message('q '.$result['q']);
		    if(is_array($result['bc'])) {
		      $bc = array_merge(jobplus_breadcrumb($node->nid, $result['q']), $result['bc']);
		      drupal_set_breadcrumb($bc);
		    }
		  }
		}
 	  break;
	  case 'validate':
	    if($node->type=="job") {
	      if(!isset($node->field_job_address[0]['country'])) form_set_error('field_job_address][0][country', t('Country field is required'));
	      if(!isset($node->field_job_address[0]['state'])) form_set_error('field_job_address][0][state', t('State field is required'));
		}
	    //drupal_set_message(print_r($node,1));
 	  break;
	  case 'insert':
	  case 'update':
	  case 'delete':
	    // clear all relevant caches: cids with the term in the url
		if(isset($node->taxonomy)) {
		  foreach($node->taxonomy as $term) {
		    cache_clear_all('/'.$term->tid, 'cache_job_country', TRUE);
		    cache_clear_all('/'.$term->tid, 'cache_job_category', TRUE);
		    cache_clear_all('/'.$term->tid, 'cache_job_body', TRUE);
		  }
		}
 	  break;
	}
}
function jobplus_block($op = 'list', $delta = 0) {
  global $user;
  if ($op == 'list') {
    $blocks[0] = array('info' => t('Jobs by Country'),'weight' => 0, 'status' => 1, 'region' => 'sidebar_right');
    $blocks[1] = array('info' => t('Jobs by Province/State'),'weight' => 0, 'status' => 1, 'region' => 'sidebar_right');
    $blocks[3]['info'] = t('Jobs by Type');
	// More workk to be one on these
//    $blocks[4]['info'] = t('All Jobs by Country');
//    $blocks[5]['info'] = t('All Jobs by Province/State');
     return $blocks;
  }
  else if ($op == 'view') {
    switch($delta) {
	  case 0:
         $block['subject'] = t('Jobs by Country');
         $block['content'] = jobplus_country_block();	  
	  break;
	  case 1:
         $block = jobplus_province_block();	  
	  break;
	  case 3:
        $block = jobplus_by_type_block();	  
	  break;
	  case 4:
         $block = jobplus_all_country_block();	  
	  break;
	  case 5:
         $block = jobplus_all_province_block();	  
	  break;
	}
    return $block;
  }
}

function jobplus_settings_form() {
  // settings for default and content type
//  $form['jobplus_adv_tax_menu'] = array(
//    '#type'          => 'checkbox',
//    '#title'         => t('Include Taxonomy Search'),
//    '#default_value' => variable_get('jobplus_adv_taxonomy_menu', 0),
//    '#description'   => t("Tick this if you want to involve advanced taxonomy menu module in job searches. Not active yet"),
//  );
  $form['jobplus_home_page'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Job Plus Home Page'),
    '#default_value' => variable_get('jobplus_home_page', 'jobs'),
    '#description'   => t("Enter the Drupal url for the job home page that breadcrumb links go to."),
  );
  $form['jobplus_cache'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Job Plus Cache'),
    '#default_value' => variable_get('jobplus_cache', 0),
    '#description'   => t("Tick this if you want caching activated.  This caches the country and category blocks."),
  );
  $options = array();
  if(module_exists('adv_taxonomy_menu')) {
    $result = adv_taxonomy_menu_get_settings();
	while($row = db_fetch_object($result)) {
	  $options[$row->tmid] = $row->name;
	}
  }
  if(!empty($options)) {
   $form['jobplus_adv_tax_menu_tmid'] = array(
    '#type'          => 'checkboxes',
	'#options'	     => $options,
    '#title'         => t('Advanced Taxonomy Menu system'),
    '#default_value' => variable_get('jobplus_adv_tax_menu_tmid', array()),
    '#description'   => t("Select the menu system to use for category searches."),
  );
 }
 return system_settings_form($form);
}
function jobplus_country_settings_form() {
  $result = db_query("SELECT * FROM {node} n INNER JOIN {content_type_job} j ON n.nid=j.nid WHERE j.field_job_address_country ='' OR j.field_job_address_state='' AND n.type='job'");
  $links = array();
  while($row = db_fetch_object($result)) {
    $links[$row->nid]['title'] = $row->title;
	$links[$row->nid]['href'] = l($row->title, 'node/'.$row->nid);	
  }
  if(!empty($links)) {
  $form['jobplus_report'] = array(
    '#type'          => 'markup',
    '#value' 		 => t('Missing Country and Province/State Data').'<br />'.t("The listed jobs have missing country or province/state data.").'<br />'.theme('links', $links),
  );
  }
  return system_settings_form($form);
}

function jobplus_views_tables() {
 $tables['content_type_job'] = array(
    'name' => 'content_type_job',
    'join' => array(
      'left' => array(
        'table' => 'node',
        'field' => 'nid'
      ),
      'right' => array(
        'field' => 'nid'
      )
	 ),
  );

  return $tables;

}
function jobplus_views_arguments() {
 $arguments['job_country'] = array(
    'name' => 'Job: country',
 	'handler' => 'jobplus_country_arg',
    'help' => t('Select by country.')
  );
 $arguments['job_state'] = array(
    'name' => 'Job: state/province',
 	'handler' => 'jobplus_state_arg',
    'help' => t('Select by state.')
  );

  
  return $arguments;

}
// This is for use in conjunction with the advanced taxonomy menu and jobplus module.  Create a country/province sensitive result set
// This function taken from taxonomy_select_nodes()
// functionality not yet working 100%
function jobplus_adv_taxonomy_menu_sql_alter($settings, $tids = array(), $op = 'or', $depth = 0, $pager = TRUE, $order = 'n.sticky DESC, n.created DESC') {
		
  // process parameters.  Since we do not want to change taxonomy menu links we create session variables to store current country details
  // if we browse away from the taxonomy menu system then we lose the session variables  
  if(isset($_SESSION['country'])) $country_id = $_SESSION['country'];
  if(isset($_SESSION['province'])) $province_id = $_SESSION['province'];
  // if no parameters are set just return the taxonomy result set
  if(!isset($country_id) && !isset($province_id)) return $result = adv_taxonomy_menu_select_nodes($tids, $op, $depth);
  if (count($tids) > 0) {
    // For each term ID, generate an array of descendant term IDs to the right depth.
    $descendant_tids = array();
    if ($depth === 'all') {
      $depth = NULL;
    }
    foreach ($tids as $index => $tid) {
      $term = taxonomy_get_term($tid);
      $tree = taxonomy_get_tree($term->vid, $tid, -1, $depth);
      $descendant_tids[] = array_merge(array($tid), array_map('_taxonomy_get_tid_from_term', $tree));
    }

    if ($operator == 'or') {
      $args = call_user_func_array('array_merge', $descendant_tids);
      $placeholders = implode(',', array_fill(0, count($args), '%d'));
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid LEFT JOIN {content_type_job} j ON n.nid=j.nid WHERE tn.tid IN ('. $placeholders .') AND j.field_job_address_country="%s" AND n.status = 1 ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid LEFT JOIN {content_type_job} j ON n.nid=j.nid WHERE tn.tid IN ('. $placeholders .') AND j.field_job_address_country="%s" AND n.status = 1';
    }
    else {
      $joins = '';
      $wheres = '';
      $args = array();
      foreach ($descendant_tids as $index => $tids) {
        $joins .= ' INNER JOIN {term_node} tn'. $index .' ON n.nid = tn'. $index .'.nid';
        $placeholders = implode(',', array_fill(0, count($tids), '%d'));
        $wheres .= ' AND tn'. $index .'.tid IN ('. $placeholders .')';
        $args = array_merge($args, $tids);
      }
      $sql = 'SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n '. $joins .' LEFT JOIN {content_type_job} j ON n.nid=j.nid WHERE n.status = 1 '. $wheres .' AND j.field_job_address_country="%s" ORDER BY '. $order;
      $sql_count = 'SELECT COUNT(DISTINCT(n.nid)) FROM {node} n '. $joins .' LEFT JOIN {content_type_job} j ON n.nid=j.nid  WHERE n.status = 1  '. $wheres .' AND j.field_job_address_country="%s"';
    }
	$args[] = $country_id;
    $sql = db_rewrite_sql($sql);
    $sql_count = db_rewrite_sql($sql_count);
    if ($pager) {
      $result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count, $args);
    }
    else {
      $result = db_query($sql, $args);
    }
  }

  return $result;
}

function jobplus_country_arg($op, &$query, $a1, $a2 = null) {
  if($op=="filter") {
    $query->add_table('content_type_job', FALSE, 1, array('left' => array('field' => 'nid', 'table' => 'node'),  'right' => array('field' => 'nid')));
    $query->add_field('field_job_address_country', 'content_type_job', 'content_type_job');
    $query->add_where("content_type_job.field_job_address_country = '".arg(1)."'");
  }
}
function jobplus_state_arg($op, &$query, $a1, $a2 = null) {
  if($op=="filter") {
    $query->add_table('content_type_job', FALSE, 1, array('left' => array('field' => 'nid', 'table' => 'node'),  'right' => array('field' => 'nid')));
    $query->add_field('field_job_address_state', 'content_type_job', 'content_type_job');
    $query->add_where("content_type_job.field_job_address_state = '".arg(1)."'");
  }
}
/*  */
function jobplus_country_block() {
  global $_node;
  global $_job_settings;
  $cid = jobplus_cache_cid();
  if (variable_get('jobplus_cache', 0) && $cached = cache_get($cid, 'cache_job_country')) {
      return $cached->data;
  }
  else {
  // get a list of countries for which jobs are currently available
  // this displays on the country page or the category page
  $countries = jobplus_country_get();
  $num = array();
  $list = array();
  if(module_exists('adv_taxonomy_menu') && $_job_settings->tmid>0) {
	  if(strpos($_GET['q'], $_job_settings->display_page)==0 || $_node->type=="job") {
		if($_node->type=="job") {
		  $terms = array();
		  $array = array_flip($_job_settings->vocab_order);
		  // remove item with key of 0
		  array_shift($array);
		  $params = '/'.$array[0];
		  foreach($array as $vid) {
		    foreach($_node->taxonomy as $term) {
		      if($term->vid==$vid) { 
			    $terms[] = $term->tid;
				$params .= '/'.$term->tid;
			  }
		    }
		  }
		  $parts = $terms;
		}
        else {
	      $parts = explode("/", $_job_settings->display_page);
	      $depth = count($parts);
		  $parts = explode("/", $_GET['q']);
	      for($i=0; $i<$depth; $i++) array_shift($parts);
	      // next item is vocab id so remove it too, leaving only terms
	      array_shift($parts);
		  // if this is a taxonomy page then store url
		  if(is_numeric($parts[0])) $qs = $_GET['q'];
		}
	    if(!empty($parts) && is_numeric($parts[0])) {
		  $arg1 = array_shift($parts);
		  $terms = '';
		  $joins = '';
		  $wheres = '';
		  $args = array($arg1);
		  // this currently only works to one level
		  foreach($parts as $part) {
			$join = 'INNER JOIN {term_node} tn ON j.nid=tn.nid ';
			$args[] = $part;
		    $term = taxonomy_get_term($part);
			$terms = ' & '.$term->name;
			$placeholders = implode(',', array_fill(0, count($args), '%d'));
			$where .= ' AND tn.tid IN ('. $placeholders .')';
   		  }
	      $sql = "SELECT j.field_job_address_country FROM {node} n LEFT JOIN {content_type_job} j ON n.nid=j.nid INNER JOIN {term_node} t ON n.nid=t.nid ".$join."WHERE t.tid=%d AND n.status=1".$where;
		  $result = db_query($sql, $args);
		    $term = taxonomy_get_term($arg1);
		    $list[0]['title'] = '('.$term->name.$terms.')';
		    $list[0]['attributes'] = array('class' => 'job-search-cat');
		}
	    else $result = db_query("SELECT j.field_job_address_country FROM {node} n LEFT JOIN {content_type_job} j ON n.nid=j.nid WHERE n.status=1 ");
	  }
	  else $result = db_query("SELECT j.field_job_address_country FROM {node} n LEFT JOIN {content_type_job} j ON n.nid=j.nid WHERE n.status=1 ");
  }
  else $result = db_query("SELECT j.field_job_address_country FROM {node} n LEFT JOIN {content_type_job} j ON n.nid=j.nid WHERE n.status=1 ");
  $num = array();
  while($row = db_fetch_object($result)) {
    $num[$row->field_job_address_country]++;
  }
  // Check that the display pae is a subset of the current url (and not exactly the same)
  if($_node->type=="job") $q = $_job_settings->display_page.$params;
  elseif(isset($qs)) $q = $_GET['q'];
  else $q = 'jobs-by-country';
  // need to create a country page
  $list[1]['title'] = 'All countries';
  if($q=='jobs-by-country') $list[1]['href'] = $_GET['q'];
  else $list[1]['href'] = $q;
  $list[1]['query'] = 'country=all';
  foreach($countries as $code => $country) {
    if($num[$code]>0) {
	   $list[$code]['title'] = $country.'('.$num[$code].')';
	   if($q == 'jobs-by-country') $list[$code]['href'] = $q.'/'.$code;
	   else $list[$code]['href'] = $q;
	   $list[$code]['query'] = 'country='.$code;
	}
  }

  if($list) {
    // Cache this block
	$block = theme('links', $list);
    cache_set($cid, 'cache_job_country', $block, CACHE_TEMPORARY);
    return $block;
  }
  }
}
function jobplus_cache_cid() {
  $cid = $_GET['q'];
  if($_SESSION['country']) $cid .= '/'.$_SESSION['country'];
  if($_SESSION['province']) $cid .= '/'.$_SESSION['province'];
  return $cid;
}
function jobplus_province_block() {
  // get a list of provinces in current country for which jobs are currently available
  // this displays on the country page or the category page
  if(isset($_SESSION['country'])) $arg = $_SESSION['country'];
  elseif(arg(0)=="node" && is_numeric(arg(1))) {
    $arg = db_result(db_query("SELECT field_job_address_country FROM {content_type_job} WHERE nid=%d", arg(1)));
  }
  if(isset($arg)) {
    $parts = explode("-", $arg);
    $provinces = jobplus_province_get($parts[0]);
    $num = array();
    $list = array();
    $result = db_query("SELECT * FROM {content_type_job}");
    while($row = db_fetch_object($result)) {
      $num[$row->field_job_address_state]++;
    }
    foreach($provinces as $code => $province) {
      if($num[$code]>0) {
	    $list[$code]['title'] = $province.'('.$num[$code].')';
	    $list[$code]['href'] = 'jobs-by-province/'.$code;
	  }
    }
  }
  if($list) {
    $block['subject'] = t('Jobs by Province ('.jobplus_country_name($parts[0]).')');
    $block['content'] = theme('links', $list);
	return $block;
  }
}

/*  */
function jobplus_by_type_block() {
  global $_node;
  global $_job_settings;
  if(module_exists('adv_taxonomy_menu') && $_job_settings->tmid>0) {

	if(strpos($_GET['q'], $_job_settings->display_page)==0 || $_node->type=="job") {
	  $cid = jobplus_cache_cid();
	  $cid = 'cat-main';
	  if (variable_get('jobplus_cache', 0) && $cached = cache_get($cid, 'cache_job_category')) {
        return $cached->data;
	  }
	  else {
	    // In case admin has created a url with a '/' for the jobs page 
	    $parts = explode("/", $_job_settings->display_page);
	    $depth = count($parts);
	    $items = adv_taxonomy_menu_process_menu(variable_get('jobplus_adv_tax_menu_tmid', array()), $_job_settings->display_page, $_job_settings->display_num, $_job_settings->hide_empty, $_job_settings->display_descendants, $_job_settings->vocab_order, $_job_settings->mid, TRUE);
	    // Determine current menu items from the url
        $parts = explode("/", $_GET['q']);
	    for($i=0; $i<$depth; $i++) array_shift($parts);
        $items = jobplus_build_menu($items, $_job_settings->mid);
	    $output['content'] = theme('jobplus_menu_tree', $items, $_job_settings->mid, $parts, $_job_settings->mid);
	    $output['subject'] .= 'Jobs by Category';
		// Cache this block
		if(variable_get('jobplus_cache', 0)) cache_set($cid, 'cache_job_category', $output, CACHE_TEMPORARY);
	    return $output;
	  }
	}
  }
}
function theme_jobplus_menu_tree($items, $pid, $url_parts, $setting_mid) {
  if ($tree = jobplus_menu_tree($items, $pid, $url_parts, $setting_mid)) {
    return "\n<ul class=\"menu\">\n". $tree ."\n</ul>\n";
  }
}

function jobplus_menu_tree($items, $pid, $url_parts, $setting_mid) {
  foreach($items as $key => $item) {
    $parts = explode("/", $item['path']);
	if(!is_array($item['children'])) $leaf = TRUE;
	$expanded = FALSE;
	if(strpos($item['path'], $_GET['q'])===0) $expanded = TRUE;
	if($item['pid']==$pid && ($expanded || $pid==$setting_mid)) $output .= '<li class="'. ($leaf ? 'leaf' : ($expanded ? 'expanded' : 'collapsed')) .'">'.l($item['title'], $item['path']);
	if(is_array($item['children'])) {
	  foreach($item['children'] as $k => $child) {
	    $output .= theme('jobplus_menu_tree', array($child), $item['mid'], $url_parts, $setting_mid);
	  }
	  $output .= '</li>';
	}
  }
  return $output;
}
function _jobplus_menu_trail($pid, $path, $items, $setting_mid, &$mids=array()) {
  //   knock the last argument off
  $parent = substr($path, 0, strrpos($path, '/'));
  if(isset($pid) && $pid!=$setting_mid) {
    $mids[] = $pid;
    $mids = _jobplus_menu_trail($items[$parent]['pid'], $parent, $items, $setting_mid, $mids);
  }
  return $mids;  
}
/**
 * Create heirarchical array
 */
function jobplus_build_menu($items, $setting_mid) {
  global $_menu;
  $mid = 1;
  foreach ($items as $path => $item) {
    $items[$path]['mid'] = $mid;
	$mid++;
  }
  foreach ($items as $path => $item) {
    if (!isset($item['pid'])) {
      // Parent's location has not been customized, so figure it out using the path.
      $parent = $item['path'];
      if ($parent) {
        do {
          $parent = substr($parent, 0, strrpos($parent, '/'));
        }
        while ($parent && !isset($items[$parent]));
      }

      $items[$path]['pid'] = $items[$parent]['mid'];
    }
    // Don't make root a child of itself.
  }
  $menu = array();
  foreach ($items as $path => $item) {
    // Top level items
    if($item['pid']==$setting_mid) $menu[$item['mid']] = $item;
	else {
	  $mids = _jobplus_menu_trail($item['pid'], $item['path'], $items, $setting_mid);
	  $num = count($mids);
	  if($num==1) $menu[$mids[0]]['children'][$item['mid']] = $item;
	  if($num==2) $menu[$mids[0]]['children'][$mids[1]]['children'][$item['mid']] = $item;
	  if($num==3) $menu[$mids[0]]['children'][$mids[1]]['children'][$mids[2]]['children'][$item['mid']] = $item;
	  if($num==4) $menu[$mids[0]]['children'][$mids[1]]['children'][$mids[2]]['children'][$mids[3]]['children'][$item['mid']] = $item;
	  if($num==5) $menu[$mids[0]]['children'][$mids[1]]['children'][$mids[2]]['children'][$mids[3]]['children'][$mids[4]]['children'][$item['mid']] = $item;
	}
  }
  return $menu;
}

function jobplus_all_country_block() {
  // get a list of countries for which jobs are currently available
  // this displays on the country page or the category page
  $countries = jobplus_country_get();
  $num = array();
  $list = array();
  $result = db_query("SELECT * FROM {content_type_job}");
  while($row = db_fetch_object($result)) {
    $num[$row->field_job_address_country]++;
  }
  foreach($countries as $code => $country) {
    if($num[$code]>0) {
	   $list[$code]['title'] = $country.'('.$num[$code].')';
	   $list[$code]['href'] = 'jobs-by-country/'.$code;
	}
  }
  if($list) return theme('links', $list);
}
function jobplus_all_province_block() {
  // get a list of provinces in current country for which jobs are currently available
  // this displays on the country page or the category page
  if(arg(0) =="jobs-by-country" || arg(0) =="jobs-by-province") $arg = arg(1);
  elseif(arg(0)=="job" && arg(1)=="category") $arg=arg(3);
  elseif(arg(0)=="node" && is_numeric(arg(1))) {
    $arg = db_result(db_query("SELECT field_job_address_country FROM {content_type_job} WHERE nid=%d", arg(1)));
  }
  if(isset($arg)) {
    $parts = explode("-", $arg);
    $provinces = jobplus_province_get($parts[0]);
    $num = array();
    $list = array();
    $result = db_query("SELECT * FROM {content_type_job}");
    while($row = db_fetch_object($result)) {
      $num[$row->field_job_address_state]++;
    }
    foreach($provinces as $code => $province) {
      if($num[$code]>0) {
	    $list[$code]['title'] = $province.'('.$num[$code].')';
	    $list[$code]['href'] = 'jobs-by-province/'.$code;
	  }
    }
  }
  if($list) {
    $block['subject'] = t('Jobs by Province ('.jobplus_country_name($parts[0]).')');
    $block['content'] = theme('links', $list);
	return $block;
  }
}

function jobplus_breadcrumb($nid=0, $q='') {
  if(isset($_GET['country'])) {
	$_SESSION['country'] = $_GET['country'];
	// If only country parameter supplied then remove province session var
	if(isset($_GET['province'])) $_SESSION['province'] = $_GET['province'];
	else unset($_SESSION['province']);
	if($_GET['country']=='all') {
	  unset($_SESSION['country']);
	  unset($_SESSION['province']);
	}
  }
  if($nid>0) {
    $code = db_result(db_query("SELECT field_job_address_country FROM {content_type_job} WHERE nid=%d", $nid));
 	$bc[] = l(t('Jobs'),variable_get('jobplus_home_page', 'jobs')); 
 	if($code) $bc[] = l(jobplus_country_name($code),'jobs-by-country/'.$code);
  }
  else {
 	if($_GET['q']=='dermpedia/job/applications') $bc[] = l(t('Jobs'),variable_get('jobplus_home_page', 'jobs'));
	//use variable to detect url 
    if(substr($_GET['q'], 0, 3) =="job" || arg(0)=="resume") {
	    $bc = array();
 	    $bc[] = l(t('Jobs'),variable_get('jobplus_home_page', variable_get('jobplus_home_page', 'jobs')));
		if(isset($_SESSION['country'] )) {
		  $country_id = $_SESSION['country'] ;
		  // If only country parameter supplied then remove province session var
		  if(isset($_SESSION['country'])) $bc[] = l(jobplus_country_name($_SESSION['country']), 'jobs-by-country/'.$_SESSION['country']);
		}
	}
  }
  if (isset($bc)) {
    return $bc;
  }
  else return array();
}
function jobplus_province_select() {
  $countries = jobplus_province_get();
  $provinces = array();
  foreach($countries as $key => $country) {
    foreach($country as $code => $province)  $provinces[$code] = $province;
  }
  return $provinces;
}
function jobplus_country_name($code) {
  $countries = jobplus_country_get();
  return $countries[$code];
}
function jobplus_province_name($code) {
  $countries = jobplus_province_get();
  $parts = explode("-", $code);
  $provinces = jobplus_province_get($parts[0]);
  return $provinces[$code];
}
/**
 * List all countries on Planet! :)
 *
 * It uses the ISO notation.
 * See http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
 * or http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm
 * for further info.
 *
 * @param $available
 *   String (optional). A list of countries that are allowed.
 * @param $upper
 *   Boolean (optional). When TRUE, the country codes will
 *   be totally in Upper Case. Its the default ISO code,
 *   but the files and function are all named with lower
 *   case, so its better to return lower case by default
 * @return
 *   Array. 'COUNTRY CODE' => 'COUNTRY NAME' pairs as layed out in
 *   ISO 3166-1 alpha-2
 */
function jobplus_country_get($available = array(), $upper = FALSE) {
  $countries = array(
    'ad' => t('Andorra'),
    'ae' => t('United Arab Emirates'),
    'af' => t('Afghanistan'),
    'ag' => t('Antigua and Barbuda'),
    'ai' => t('Anguilla'),
    'al' => t('Albania'),
    'am' => t('Armenia'),
    'an' => t('Netherlands Antilles'),
    'ao' => t('Angola'),
    'aq' => t('Antarctica'),
    'ar' => t('Argentina'),
    'as' => t('American Samoa'),
    'at' => t('Austria'),
    'au' => t('Australia'),
    'aw' => t('Aruba'),
    'ax' => t('Aland Islands'),
    'az' => t('Azerbaijan'),
    'ba' => t('Bosnia and Herzegovina'),
    'bb' => t('Barbados'),
    'bd' => t('Bangladesh'),
    'be' => t('Belgium'),
    'bf' => t('Burkina Faso'),
    'bg' => t('Bulgaria'),
    'bh' => t('Bahrain'),
    'bi' => t('Burundi'),
    'bj' => t('Benin'),
    'bm' => t('Bermuda'),
    'bn' => t('Brunei'),
    'bo' => t('Bolivia'),
    'br' => t('Brazil'),
    'bs' => t('Bahamas'),
    'bt' => t('Bhutan'),
    'bv' => t('Bouvet Island'),
    'bw' => t('Botswana'),
    'by' => t('Belarus'),
    'bz' => t('Belize'),
    'ca' => t('Canada'),
    'cc' => t('Cocos (Keeling) Islands'),
    'cd' => t('Congo (Kinshasa)'),
    'cf' => t('Central African Republic'),
    'cg' => t('Congo (Brazzaville)'),
    'ch' => t('Switzerland'),
    'ci' => t('Ivory Coast'),
    'ck' => t('Cook Islands'),
    'cl' => t('Chile'),
    'cm' => t('Cameroon'),
    'cn' => t('China'),
    'co' => t('Colombia'),
    'cr' => t('Costa Rica'),
    'cs' => t('Serbia And Montenegro'),
    'cu' => t('Cuba'),
    'cv' => t('Cape Verde'),
    'cx' => t('Christmas Island'),
    'cy' => t('Cyprus'),
    'cz' => t('Czech Republic'),
    'de' => t('Germany'),
    'dj' => t('Djibouti'),
    'dk' => t('Denmark'),
    'dm' => t('Dominica'),
    'do' => t('Dominican Republic'),
    'dz' => t('Algeria'),
    'ec' => t('Ecuador'),
    'ee' => t('Estonia'),
    'eg' => t('Egypt'),
    'eh' => t('Western Sahara'),
    'er' => t('Eritrea'),
    'es' => t('Spain'),
    'et' => t('Ethiopia'),
    'fi' => t('Finland'),
    'fj' => t('Fiji'),
    'fk' => t('Falkland Islands'),
    'fm' => t('Micronesia'),
    'fo' => t('Faroe Islands'),
    'fr' => t('France'),
    'ga' => t('Gabon'),
    'gd' => t('Grenada'),
    'ge' => t('Georgia'),
    'gf' => t('French Guiana'),
    'gg' => t('Guernsey'),
    'gh' => t('Ghana'),
    'gi' => t('Gibraltar'),
    'gl' => t('Greenland'),
    'gm' => t('Gambia'),
    'gn' => t('Guinea'),
    'gp' => t('Guadeloupe'),
    'gq' => t('Equatorial Guinea'),
    'gr' => t('Greece'),
    'gs' => t('South Georgia and the South Sandwich Islands'),
    'gt' => t('Guatemala'),
    'gu' => t('Guam'),
    'gw' => t('Guinea-Bissau'),
    'gy' => t('Guyana'),
    'hk' => t('Hong Kong S.A.R., China'),
    'hm' => t('Heard Island and McDonald Islands'),
    'hn' => t('Honduras'),
    'hr' => t('Croatia'),
    'ht' => t('Haiti'),
    'hu' => t('Hungary'),
    'id' => t('Indonesia'),
    'ie' => t('Ireland'),
    'il' => t('Israel'),
    'im' => t('Isle of Man'),
    'in' => t('India'),
    'io' => t('British Indian Ocean Territory'),
    'iq' => t('Iraq'),
    'ir' => t('Iran'),
    'is' => t('Iceland'),
    'it' => t('Italy'),
    'je' => t('Jersey'),
    'jm' => t('Jamaica'),
    'jo' => t('Jordan'),
    'jp' => t('Japan'),
    'ke' => t('Kenya'),
    'kg' => t('Kyrgyzstan'),
    'kh' => t('Cambodia'),
    'ki' => t('Kiribati'),
    'km' => t('Comoros'),
    'kn' => t('Saint Kitts and Nevis'),
    'kp' => t('North Korea'),
    'kr' => t('South Korea'),
    'kw' => t('Kuwait'),
    'ky' => t('Cayman Islands'),
    'kz' => t('Kazakhstan'),
    'la' => t('Laos'),
    'lb' => t('Lebanon'),
    'lc' => t('Saint Lucia'),
    'li' => t('Liechtenstein'),
    'lk' => t('Sri Lanka'),
    'lr' => t('Liberia'),
    'ls' => t('Lesotho'),
    'lt' => t('Lithuania'),
    'lu' => t('Luxembourg'),
    'lv' => t('Latvia'),
    'ly' => t('Libya'),
    'ma' => t('Morocco'),
    'mc' => t('Monaco'),
    'md' => t('Moldova'),
    'me' => t('Montenegro'),
    'mg' => t('Madagascar'),
    'mh' => t('Marshall Islands'),
    'mk' => t('Macedonia'),
    'ml' => t('Mali'),
    'mm' => t('Myanmar'),
    'mn' => t('Mongolia'),
    'mo' => t('Macao S.A.R., China'),
    'mp' => t('Northern Mariana Islands'),
    'mq' => t('Martinique'),
    'mr' => t('Mauritania'),
    'ms' => t('Montserrat'),
    'mt' => t('Malta'),
    'mu' => t('Mauritius'),
    'mv' => t('Maldives'),
    'mw' => t('Malawi'),
    'mx' => t('Mexico'),
    'my' => t('Malaysia'),
    'mz' => t('Mozambique'),
    'na' => t('Namibia'),
    'nc' => t('New Caledonia'),
    'ne' => t('Niger'),
    'nf' => t('Norfolk Island'),
    'ng' => t('Nigeria'),
    'ni' => t('Nicaragua'),
    'nl' => t('Netherlands'),
    'no' => t('Norway'),
    'np' => t('Nepal'),
    'nr' => t('Nauru'),
    'nu' => t('Niue'),
    'nz' => t('New Zealand'),
    'om' => t('Oman'),
    'pa' => t('Panama'),
    'pe' => t('Peru'),
    'pf' => t('French Polynesia'),
    'pg' => t('Papua New Guinea'),
    'ph' => t('Philippines'),
    'pk' => t('Pakistan'),
    'pl' => t('Poland'),
    'pm' => t('Saint Pierre and Miquelon'),
    'pn' => t('Pitcairn'),
    'pr' => t('Puerto Rico'),
    'ps' => t('Palestinian Territory'),
    'pt' => t('Portugal'),
    'pw' => t('Palau'),
    'py' => t('Paraguay'),
    'qa' => t('Qatar'),
    're' => t('Reunion'),
    'ro' => t('Romania'),
    'rs' => t('Serbia'),
    'ru' => t('Russia'),
    'rw' => t('Rwanda'),
    'sa' => t('Saudi Arabia'),
    'sb' => t('Solomon Islands'),
    'sc' => t('Seychelles'),
    'sd' => t('Sudan'),
    'se' => t('Sweden'),
    'sg' => t('Singapore'),
    'sh' => t('Saint Helena'),
    'si' => t('Slovenia'),
    'sj' => t('Svalbard and Jan Mayen'),
    'sk' => t('Slovakia'),
    'sl' => t('Sierra Leone'),
    'sm' => t('San Marino'),
    'sn' => t('Senegal'),
    'so' => t('Somalia'),
    'sr' => t('Suriname'),
    'st' => t('Sao Tome and Principe'),
    'sv' => t('El Salvador'),
    'sy' => t('Syria'),
    'sz' => t('Swaziland'),
    'tc' => t('Turks and Caicos Islands'),
    'td' => t('Chad'),
    'tf' => t('French Southern Territories'),
    'tg' => t('Togo'),
    'th' => t('Thailand'),
    'tj' => t('Tajikistan'),
    'tk' => t('Tokelau'),
    'tl' => t('East Timor'),
    'tm' => t('Turkmenistan'),
    'tn' => t('Tunisia'),
    'to' => t('Tonga'),
    'tr' => t('Turkey'),
    'tt' => t('Trinidad and Tobago'),
    'tv' => t('Tuvalu'),
    'tw' => t('Taiwan'),
    'tz' => t('Tanzania'),
    'ua' => t('Ukraine'),
    'ug' => t('Uganda'),
    'uk' => t('United Kingdom'),
    'um' => t('United States Minor Outlying Islands'),
    'us' => t('United States'),
    'uy' => t('Uruguay'),
    'uz' => t('Uzbekistan'),
    'va' => t('Vatican'),
    'vc' => t('Saint Vincent and the Grenadines'),
    've' => t('Venezuela'),
    'vg' => t('British Virgin Islands'),
    'vi' => t('U.S. Virgin Islands'),
    'vn' => t('Vietnam'),
    'vu' => t('Vanuatu'),
    'wf' => t('Wallis and Futuna'),
    'ws' => t('Samoa'),
    'ye' => t('Yemen'),
    'yt' => t('Mayotte'),
    'za' => t('South Africa'),
    'zm' => t('Zambia'),
    'zw' => t('Zimbabwe'),
  );

  if (!empty($available)) {
    foreach ($countries as $ccode => $country) {
      if (empty($available[$ccode])) {
        unset($countries[$ccode]);
      }
    }
  }

  // In fact, the ISO codes for countries are all Upper Case.
  // So, if someone needs the list as the official records,
  // it will convert.
  if (!empty($upper)) {
    $countries = array_change_key_case($countries, CASE_UPPER);
  }

  // Sort the list and return
  natcasesort($countries);

  return $countries;
}

/**
 * 3-diget code of all countries on Planet! :)
 *
 * It uses the ISO notation.
 * See http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
 * for further info.
 *
 * @return
 *   Array. 'COUNTRY 2-DIGIT CODE' => 'COUNTRY 3-DIGIT CODE' pairs
 */
function jobplus_country_get_code3() {
  $countries = array(
    'af' => 'afg',
    'ax' => 'ala',
    'al' => 'alb',
    'dz' => 'dza',
    'as' => 'asm',
    'ad' => 'and',
    'ao' => 'ago',
    'ai' => 'aia',
    'aq' => 'ata',
    'ag' => 'atg',
    'ar' => 'arg',
    'am' => 'arm',
    'aw' => 'abw',
    'au' => 'aus',
    'at' => 'aut',
    'az' => 'aze',
    'bs' => 'bhs',
    'bh' => 'bhr',
    'bd' => 'bgd',
    'bb' => 'brb',
    'by' => 'blr',
    'be' => 'bel',
    'bz' => 'blz',
    'bj' => 'ben',
    'bm' => 'bmu',
    'bt' => 'btn',
    'bo' => 'bol',
    'ba' => 'bih',
    'bw' => 'bwa',
    'bv' => 'bvt',
    'br' => 'bra',
    'io' => 'iot',
    'bn' => 'brn',
    'bg' => 'bgr',
    'bf' => 'bfa',
    'bi' => 'bdi',
    'kh' => 'khm',
    'cm' => 'cmr',
    'ca' => 'can',
    'cv' => 'cpv',
    'ky' => 'cym',
    'cf' => 'caf',
    'td' => 'tcd',
    'cl' => 'chl',
    'cn' => 'chn',
    'cx' => 'cxr',
    'cc' => 'cck',
    'co' => 'col',
    'km' => 'com',
    'cg' => 'cog',
    'cd' => 'zar',
    'ck' => 'cok',
    'cr' => 'cri',
    'ci' => 'civ',
    'hr' => 'hrv',
    'cu' => 'cub',
    'cy' => 'cyp',
    'cz' => 'cze',
    'dk' => 'dnk',
    'dj' => 'dji',
    'dm' => 'dma',
    'do' => 'dom',
    'ec' => 'ecu',
    'eg' => 'egy',
    'sv' => 'slv',
    'gq' => 'gnq',
    'er' => 'eri',
    'ee' => 'est',
    'et' => 'eth',
    'fk' => 'flk',
    'fo' => 'fro',
    'fj' => 'fji',
    'fi' => 'fin',
    'fr' => 'fra',
    'gf' => 'guf',
    'pf' => 'pyf',
    'tf' => 'atf',
    'ga' => 'gab',
    'gm' => 'gmb',
    'ge' => 'geo',
    'de' => 'deu',
    'gh' => 'gha',
    'gi' => 'gib',
    'gr' => 'grc',
    'gl' => 'grl',
    'gd' => 'grd',
    'gp' => 'glp',
    'gu' => 'gum',
    'gt' => 'gtm',
    'gg' => 'ggy',
    'gn' => 'gin',
    'gw' => 'gnb',
    'gy' => 'guy',
    'ht' => 'hti',
    'hm' => 'hmd',
    'va' => 'vat',
    'hn' => 'hnd',
    'hk' => 'hkg',
    'hu' => 'hun',
    'is' => 'isl',
    'in' => 'ind',
    'id' => 'idn',
    'ir' => 'irn',
    'iq' => 'irq',
    'ie' => 'irl',
    'im' => 'imn',
    'il' => 'isr',
    'it' => 'ita',
    'jm' => 'jam',
    'jp' => 'jpn',
    'je' => 'jey',
    'jo' => 'jor',
    'kz' => 'kaz',
    'ke' => 'ken',
    'ki' => 'kir',
    'kp' => 'prk',
    'kr' => 'kor',
    'kw' => 'kwt',
    'kg' => 'kgz',
    'la' => 'lao',
    'lv' => 'lva',
    'lb' => 'lbn',
    'ls' => 'lso',
    'lr' => 'lbr',
    'ly' => 'lby',
    'li' => 'lie',
    'lt' => 'ltu',
    'lu' => 'lux',
    'mo' => 'mac',
    'mk' => 'mkd',
    'mg' => 'mdg',
    'mw' => 'mwi',
    'my' => 'mys',
    'mv' => 'mdv',
    'ml' => 'mli',
    'mt' => 'mlt',
    'mh' => 'mhl',
    'mq' => 'mtq',
    'mr' => 'mrt',
    'mu' => 'mus',
    'yt' => 'myt',
    'mx' => 'mex',
    'fm' => 'fsm',
    'md' => 'mda',
    'mc' => 'mco',
    'mn' => 'mng',
    'me' => 'mne',
    'ms' => 'msr',
    'ma' => 'mar',
    'mz' => 'moz',
    'mm' => 'mmr',
    'na' => 'nam',
    'nr' => 'nru',
    'np' => 'npl',
    'nl' => 'nld',
    'an' => 'ant',
    'nc' => 'ncl',
    'nz' => 'nzl',
    'ni' => 'nic',
    'ne' => 'ner',
    'ng' => 'nga',
    'nu' => 'niu',
    'nf' => 'nfk',
    'mp' => 'mnp',
    'no' => 'nor',
    'om' => 'omn',
    'pk' => 'pak',
    'pw' => 'plw',
    'ps' => 'pse',
    'pa' => 'pan',
    'pg' => 'png',
    'py' => 'pry',
    'pe' => 'per',
    'ph' => 'phl',
    'pn' => 'pcn',
    'pl' => 'pol',
    'pt' => 'prt',
    'pr' => 'pri',
    'qa' => 'qat',
    're' => 'reu',
    'ro' => 'rou',
    'ru' => 'rus',
    'rw' => 'rwa',
    'bl' => 'blm',
    'sh' => 'shn',
    'kn' => 'kna',
    'lc' => 'lca',
    'mf' => 'maf',
    'pm' => 'spm',
    'vc' => 'vct',
    'ws' => 'wsm',
    'sm' => 'smr',
    'st' => 'stp',
    'sa' => 'sau',
    'sn' => 'sen',
    'rs' => 'srb',
    'sc' => 'syc',
    'sl' => 'sle',
    'sg' => 'sgp',
    'sk' => 'svk',
    'si' => 'svn',
    'sb' => 'slb',
    'so' => 'som',
    'za' => 'zaf',
    'gs' => 'sgs',
    'es' => 'esp',
    'lk' => 'lka',
    'sd' => 'sdn',
    'sr' => 'sur',
    'sj' => 'sjm',
    'sz' => 'swz',
    'se' => 'swe',
    'ch' => 'che',
    'sy' => 'syr',
    'tw' => 'twn',
    'tj' => 'tjk',
    'tz' => 'tza',
    'th' => 'tha',
    'tl' => 'tls',
    'tg' => 'tgo',
    'tk' => 'tkl',
    'to' => 'ton',
    'tt' => 'tto',
    'tn' => 'tun',
    'tr' => 'tur',
    'tm' => 'tkm',
    'tc' => 'tca',
    'tv' => 'tuv',
    'ug' => 'uga',
    'ua' => 'ukr',
    'ae' => 'are',
    'gb' => 'gbr',
    'us' => 'usa',
    'um' => 'umi',
    'uy' => 'ury',
    'uz' => 'uzb',
    'vu' => 'vut',
    've' => 'ven',
    'vn' => 'vnm',
    'vg' => 'vgb',
    'vi' => 'vir',
    'wf' => 'wlf',
    'eh' => 'esh',
    'ye' => 'yem',
    'zm' => 'zmb',
    'zw' => 'zwe'
  );

  return $countries;
}

/**
 * Get available states.
 *
 * @param $country
 *   String (optional). The 2-digit country code
 * @return
 *   Array. If $country is passed, then return an array
 *   of states for that country. If nothing is passed then return
 *   an array of countrys who have states, where each country contains
 *   an array of states.
 */
function jobplus_province_get($country = NULL) {
 // static $provinces;

  // Get a list of countries
  $countries_all = jobplus_country_get();

  // Test if its needed to update the province list
  if (empty($country) and empty($provinces)) {
    // Get the countries list
    $countries = array_keys($countries_all);
    $update = TRUE;
  }
  elseif (!empty($country) and $countries_all[$country] and empty($provinces[$country])) {
    $countries[] = $country;
    $update = TRUE;
  }

  if (!empty($update)) {
    foreach ($countries as $country_code) {
      // Load country specifice code .inc file if it exists.
      // For example, if country_code for U.S. == 'us', load 'addresses.us.inc'
      include_once drupal_get_path('module', 'country_select') .'/countries/'. $country_code .'.inc';

      // If the country has a province list, load it
      $function = 'addresses_province_list_'. $country_code;
      if (function_exists($function)) {
        $provinces[$country_code] = $function();
      }
	  // add country code to province code to make province codes unique
	  $process_provinces[$country_code] = array();
	  foreach($provinces[$country_code] as $key => $item) $process_provinces[$country_code][$country_code.'-'.$key] = $item;
	  $provinces[$country_code] = $process_provinces[$country_code];
	  //drupal_set_message(print_r($provinces[$country_code], true));
    }
  }

  // Return the states of a single country, if any
  if (!empty($country)) {
    if (isset($provinces[$country_code])) {
      return $provinces[$country_code];
    }
    else {
      return array();
    }
  }
  else {
    return $provinces;
  }
}
function jobplus_views_default_views() {
  $view = new stdClass();
  $view->name = 'JobsByCountry';
  $view->description = 'Listing of jobs per country';
  $view->access = array (
);
  $view->view_args_php = 'if(module_exists(\'jobplus\')) {
$view->argument[0][\'title\'] = jobplus_country_name($view->args[0]);
}';
  $view->page = TRUE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '3';
  $view->page_footer = '';
  $view->page_footer_format = '3';
  $view->page_empty = 'No Jobs available';
  $view->page_empty_format = '3';
  $view->page_type = 'list';
  $view->url = 'jobs-by-country/$arg';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '20';
  $view->sort = array (
  );
  $view->argument = array (
    array (
      'type' => 'job_country',
      'argdefault' => '7',
      'title' => '%1',
      'options' => '',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
  );
  $view->field = array (
    array (
      'tablename' => 'node',
      'field' => 'title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
    ),
  );
  $view->filter = array (
  );
  $view->exposed_filter = array (
  );
  $view->requires = array(node);
  $views[$view->name] = $view;
  
  $view = new stdClass();
  $view->name = 'JobsByProvince';
  $view->description = 'List of jobs available within a province of a country';
  $view->access = array (
);
  $view->view_args_php = 'if(module_exists(\'jobplus\')) {
$view->argument[0][\'title\'] = jobplus_province_name($view->args[0]);
}';
  $view->page = TRUE;
  $view->page_title = '';
  $view->page_header = '';
  $view->page_header_format = '3';
  $view->page_footer = '';
  $view->page_footer_format = '3';
  $view->page_empty = 'No Jobs available';
  $view->page_empty_format = '3';
  $view->page_type = 'list';
  $view->url = 'jobs-by-province/$arg';
  $view->use_pager = TRUE;
  $view->nodes_per_page = '20';
  $view->sort = array (
  );
  $view->argument = array (
    array (
      'type' => 'job_state',
      'argdefault' => '7',
      'title' => '%1',
      'options' => '',
      'wildcard' => '',
      'wildcard_substitution' => '',
    ),
  );
  $view->field = array (
    array (
      'tablename' => 'node',
      'field' => 'title',
      'label' => '',
      'handler' => 'views_handler_field_nodelink',
      'options' => 'link',
    ),
  );
  $view->filter = array (
  );
  $view->exposed_filter = array (
  );
  $view->requires = array(node);
  $views[$view->name] = $view;

  return $views;
}