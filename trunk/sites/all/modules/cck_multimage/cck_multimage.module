<?php
// $Id: cck_multimage.module,v 1.3 2007/08/18 06:27:17 silviogutierrez Exp $

/**
 * @file
 * Defines an image field type.
 * imagefield uses content.module to store the fid, and the drupal files 
 * table to store the actual file data.
 *
 */


/**
 * Implementation of hook_perm() in order implement access control to CCK Multimage administration.
 */ 
function cck_multimage_perm() {
  return array('administer CCK Multimage');
} 


/**
 * Implemenation of hook_menu().
 */ 
function cck_multimage_menu($maycache) {
  $items = array();
  if (!$maycache) {
    $items[] = array(
      'path' => 'admin/content/cck-multimages',
      'title' => t('CCK Multimage'),  
	  'description' => t('View, Edit and Administer your Multimages.'),
      'callback' => 'cck_multimage_admin',
      'access' => user_access('administer CCK Multimage'),
      
    );
  }
  return $items;

}




/**
 * Implementaiton of hook_help().
 */
function cck_multimage_help($section) {
  switch ($section) {
    case 'admin/content/cck-multimages':
      return t('The fields listed below are candidates for displaying as a multimage. In order display a multimage, a node type must contain an image field with multiple values.');
  }
}


/**
 * Menu callback for displaying the cck multimage settings page.
 */
function cck_multimage_admin($node_type = NULL, $field_name = NULL) {
  if ($node_type && $field_name) {
    drupal_set_title(t('Edit multimage for %multimage', array('%multimage' => $node_type)));
    return drupal_get_form('cck_multimage_edit_form', $node_type, $field_name);
  }
  else {
    drupal_set_title('CCK Multimage Settings');
    return cck_multimage_settings();
  }
}

function cck_multimage_settings() {
  $types = content_types();

  $header = array(
    array('data' => t('CCK Type and Field'), 'colspan' => 2),
    array('data' => t('Teaser Display Status'), 'colspan' => 1),
    array('data' => t('Full Display Status'), 'colspan' => 1),
    array('data' => t('Operations'), 'colspan' => 2),
  );

  $rows = array();
  foreach ($types as $type_name => $type) {
    $multimage_fields = array();
    foreach($type['fields'] as $field_name => $field) {
      // If the type contains an image field add the field right away
      if ($field['type'] == 'image') {
        $multimage_fields[$field_name] = $field;
      }
      // If the type contains a node reference field, check if the referenced
      // node type contains an image field.
      elseif ($field['type'] == 'nodereference') {
        $referenced_contains_image = false;
        foreach ((array)$field['referenceable_types'] as $referenceable_type) {
          if ($referenceable_type && $types[$referenceable_type]) {
            foreach ($types[$referenceable_type]['fields'] as $referenceable_field) {
              if ($referenceable_field['type'] == 'image') {
                $referenced_contains_image = true;
              }
            }
          }
        }
        if ($referenced_contains_image) {
          $multimage_fields[$field_name] = $field;
        }
      }
    }
    if (!empty($multimage_fields)) {
      $rows[] = array(array('data' => $type['name'], 'colspan' => 6));
    }
    foreach ($multimage_fields as $field_name => $field) {
      $row = array();
      $row[] = '';
      $row[] = $field['field_name'];
      $row[] = $field['display_settings']['teaser']['format'] == 'cck_multimage' ? '<strong>'. $field['display_settings']['teaser']['format'] .'<strong>' : $field['display_settings']['teaser']['format'];
      $row[] = $field['display_settings']['full']['format'] == 'cck_multimage' ? '<strong>'. $field['display_settings']['full']['format'] .'<strong>' : $field['display_settings']['full']['format'];
      $row[] = l(t('Change display settings'), 'admin/content/types/'. str_replace('_', '-', $type_name) .'/display', NULL, 'destination=admin/content/cck-multimages');
      $row[] = l(t('Edit multimage'), 'admin/content/cck-multimages/'. $type_name .'/'. $field_name);
      $rows[] = $row;
    }
  }
  
  return theme('table', $header, $rows);
}

function cck_multimage_edit_form($node_type, $field_name) {
  $settings = cck_multimage_get_settings($node_type, $field_name);
  
  $form = array();
  
  $form['node_type'] = array(
    '#type' => 'value',
    '#value' => $node_type,
  );

  $form['field_name'] = array(
    '#type' => 'value',
    '#value' => $field_name,
  );
  
  $form['preset'] = array(
    '#type' => 'select',
    '#title' => t('Imagecache Preset'),
    '#description' => t('The imagecache module is used to generate the pictures for the multimage. Select an existing preset or configure a preset in the <a href="!imagecache">imagecache settings</a>.'					, array('!imagecache' => url('admin/content/imagecache'))),
    '#options' => array('' => 'Full size image') + drupal_map_assoc(_imagecache_get_presets()),
    '#default_value' => $settings['preset'],
  );
  $form['teaser-preset'] = array(
    '#type' => 'select',
    '#title' => t('Imagecache Teaser Preset'),
    '#description' => t('If you want to have multimage display on teasers, it is highly recommended you create a preset just for teasers with square dimensions, for example 100px x 100px. Select an existing preset or configure a preset in the <a href="!imagecache">imagecache settings</a>.'					, array('!imagecache' => url('admin/content/imagecache'))),
  //  '#options' => array('' => 'Full size image') + drupal_map_assoc(_imagecache_get_presets()),
    '#options' => array('' => 'Full size image') + drupal_map_assoc(_imagecache_get_presets()),
	'#default_value' => $settings['teaser-preset'],
  );
  
   $form['detailed_css'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use detailed CSS.'),
    '#description' => t(' Each image field will have its own class distinguishing it from other image fields or even the same image field in other node types. Recommended if you want to apply a separate style to each image field depending on the content type or the field type.'),
    '#default_value' => $settings['detailed_css'],
  );
  
   $form['captions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show captions.'),
    '#description' => t('When uploading images, you can assign each one a caption to display. Make sure that the option "Enable Custom Title Text" is enabled in your imagefield options.'),
    '#default_value' => $settings['captions'],
  );
  
   $form['compatibility'] = array(
    '#type' => 'checkbox',
    '#title' => t('IE6 Compatibility (Recommended)'),
    '#description' => t('Sometimes, IE6\'s use of Fade In and Fade Out can behave strangely, flickering or misaligning. Since all testing for IE6 was done on a virtual machine, this may be why the effect behaved strangely. In compatibility mode, the effect will be absent in IE6. Experiment with either mode in a true installation of IE6 and provide feekdback. Important: This setting MUST be the same across all your Multimages, otherwise the two Javascript files will act at once, causing erratic behaviour.'),
    '#default_value' => $settings['compatibility'],
  );

  $form['destination'] = array(
    '#type' => 'hidden',
    '#value' => 'admin/content/cck-multimages',
  );
  
  $form['op'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

/**
 * Validation handler for multimage edit form.
 */
function cck_multimage_edit_form_validate($form_id, $form_values) {

}

/**
 * Submit handler for multimage edit form.
 */
function cck_multimage_edit_form_submit($form_id, $form_values) {
  unset($form_values['op'], $form_values['form_id'], $form_values['form_token']);
  variable_set('cck_multimage_'. $form_values['node_type'] .'_'. $form_values['field_name'], $form_values);
  drupal_set_message(t('Multimage settings for %type saved.', array('%type' => $form_values['node_type'])));
}


/**
 * Implementation of hook_field_formatter_info().
 */
function cck_multimage_field_formatter_info() {
  $formatters = array(
    'cck_multimage' => array(
      'label' => 'CCK Multimage',
      'field types' => array('image', 'nodereference'),
    ),
  );
  return $formatters;
}


/**
 * Implementation of hook_nodeapi().
 */
function cck_multimage_nodeapi(&$node, $op, $teaser, $page) {
  
  if ($op == 'view') {
    $display_type = $teaser ? 'teaser' : 'full';
    $type = content_types($node->type);
    foreach ($type['fields'] as $field_name => $field) {
      if ($field['display_settings'][$display_type]['format'] == 'cck_multimage') {
        $settings = cck_multimage_get_settings($node->type, $field_name);
        $node->content[$field_name]['#value'] = theme('cck_multimage', $node->{$field['field_name']}, $settings, $node, $field, $teaser);
      }
    }
  }
}

function theme_cck_multimage($images, $settings, $node, $field, $teaser) {
  
  if(!isset($images[0]['nid'])) {
  //There seems to be some error with imagecache, when you delete all images from a node, it wont fully delete the first image info.
  //This checks against this bug, makes sure it does not print out anything if there are no images.
    
    return;
  }
  
  if ($teaser) {  	
  	$imagecache_directory = $settings['teaser-preset'];  
    $css_root = 'multimage-teaser';
  }
  else {
  	$imagecache_directory = $settings['preset'];    	
  	$css_root = 'multimage';
  }
  

  $multimage_image_id = $css_root . '-' . $node->nid .'-'. $field['field_name'];
  $multimage_container = $css_root;
  $multimage_image_class = 'multimage-image'; 
  $multimage_top = $css_root . '-top';
  $multimage_bottom = $css_root . '-bottom';
  
  if ($settings['detailed_css']) {
	$multimage_container .= ' ' . $css_root . '-' . $node->type . '-' . $field['field_name'];
	$multimage_image_class .= ' ' . $css_root . '-' . $node->type . '-image' . '-' . $field['field_name'];
  	$multimage_top .= ' ' . $css_root . '-top-' . $node->type . '-' . $field['field_name'];
	$multimage_bottom .= ' ' . $css_root . '-bottom-' . $node->type . '-' . $field['field_name'];
  }
  
  $max_height = 0;
  $fileNames = array();  
  $fileCaptions = array();
  
  foreach ($images as $image) {
      $image_path = file_directory_path() .'/imagecache/'. $imagecache_directory .'/'. $image['filepath'];
      $image_info = image_get_info($image_path);
      $height = $image_info['height'];
      
      if ($height > $max_height) {
        $max_height = $height;
		$max_height += 30; //Account for the fact that the bottom might run into the text.
      }
		
	  array_push($fileNames, file_create_url(file_directory_path() .'/imagecache/'. $imagecache_directory .'/'. $image['filepath']));	  
  	  if ($settings['captions'] && !$teaser) {
	  	array_push($fileCaptions, $image['title']);	  
	  }
	  else {
	  	array_push($fileCaptions, '');	 
	  }

  }
  
  $firstCaption = '';
  if ($settings['captions'] && !$teaser) {
    $firstCaption = $images[0]['title'];
  }

  
  $output = '';  
  
  $output .= '<div class="'. $multimage_container . '" style="height:' . $max_height . 'px;">';
	  $output .= '<div class="' . $multimage_top . '">';
	  	$output .=  theme('imagecache', $imagecache_directory, $images[0]['filepath'], '', $images[0]['title'], array('id' => $multimage_image_id, 'class' => $multimage_image_class));
	  $output .= '</div>';
 	 $output .= '<div class="' . $multimage_bottom . '">' . $firstCaption . '</div>';	
	 $output .= '<img class="multimage-buffer" src= "" alt="" style="display: none;" />';
  $output .= '</div>';  
  
  drupal_add_js(array($multimage_image_id  => $fileNames, $multimage_image_id . '-captions' => $fileCaptions, $multimage_image_id . '-mode' => (isset($images[1]) ? 'multiple' : 'single')), 'setting');
  
  if ($settings['compatibility']) { //Add a dynamic JS file that detects the browser and removes the fade effect from IE6.
    drupal_add_js(drupal_get_path('module', 'cck_multimage') .'/cck_multimage_javascript.php');   
  }
  else { //Static JS File.
    drupal_add_js(drupal_get_path('module', 'cck_multimage') .'/cck_multimage.js');   
  } 
  

  return $output;
}

/**
 * Retreive the settings for a specific multimage.
 */
function cck_multimage_get_settings($node_type, $field_name) {
  $settings = variable_get('cck_multimage_'. $node_type .'_'. $field_name, array());
  $settings['detailed_css'] = $settings['detailed_css'];
  $settings['captions'] = $settings['captions']; 
  $settings['compatibility'] = $settings['compatibility']; 
  return $settings;
}